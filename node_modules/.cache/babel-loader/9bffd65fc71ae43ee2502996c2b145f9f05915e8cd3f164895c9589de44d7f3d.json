{"ast":null,"code":"var _jsxFileName = \"/Users/iyunji/Desktop/re-local/src/Genre/Genre.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport './Genre.css';\nimport posters from './postersData';\nimport TopNav from '../components/Topnav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Genre = () => {\n  _s();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const category = searchParams.get('category'); // URL에서 장르 가져옴\n\n  const [current, setCurrent] = useState(0);\n\n  // 해당 장르만 필터\n  const filteredPosters = category ? posters.filter(p => p.category === category) : posters;\n  const len = filteredPosters.length;\n  // 카테고리 바뀌면 인덱스 리셋 (안하면 범위 밖 인덱스가 남을 수 있음)\n  useEffect(() => {\n    setCurrent(0);\n  }, [category]);\n  useEffect(() => {\n    if (len < 1) return; // 빈 배열이면 타이머 만들지 않음\n    const timer = setInterval(() => {\n      setCurrent(prev => (prev + 1) % len);\n    }, 5000);\n    return () => clearInterval(timer);\n  }, [len]);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrent(prev => (prev + 1) % filteredPosters.length);\n    }, 5000);\n    return () => clearInterval(timer);\n  }, [filteredPosters.length]);\n  const visiblePosters = len ? [filteredPosters[current % len], filteredPosters[(current + 1) % len], filteredPosters[(current + 2) % len]] : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"genre-container\",\n    children: [/*#__PURE__*/_jsxDEV(TopNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: category ? `${category} 포스터` : '전체 포스터'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"poster-section carousel\",\n      children: visiblePosters.map(p => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poster-card-mine\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: p.image,\n          alt: p.title,\n          className: \"poster-img-mine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"poster-title\",\n          children: p.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"poster-info\",\n          children: [p.category, \" \", p.location && `| ${p.location}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, p.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poster-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/genre/all'),\n        children: \"See All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/genre/recommend'),\n        children: \"Recommendation For U\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Genre, \"JU5Lr7x5fpeRtPRS/SIdfhvLQBA=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\n_c = Genre;\nexport default Genre;\nvar _c;\n$RefreshReg$(_c, \"Genre\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useSearchParams","posters","TopNav","jsxDEV","_jsxDEV","Genre","_s","navigate","searchParams","category","get","current","setCurrent","filteredPosters","filter","p","len","length","timer","setInterval","prev","clearInterval","visiblePosters","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","src","image","alt","title","location","id","onClick","_c","$RefreshReg$"],"sources":["/Users/iyunji/Desktop/re-local/src/Genre/Genre.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport './Genre.css';\nimport posters from './postersData';\nimport TopNav from '../components/Topnav';\n\nconst Genre = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const category = searchParams.get('category'); // URL에서 장르 가져옴\n\n  const [current, setCurrent] = useState(0);\n\n  // 해당 장르만 필터\n  const filteredPosters = category\n    ? posters.filter(p => p.category === category)\n    : posters;\n\n    const len = filteredPosters.length;\n// 카테고리 바뀌면 인덱스 리셋 (안하면 범위 밖 인덱스가 남을 수 있음)\nuseEffect(() => { setCurrent(0); }, [category]);\nuseEffect(() => {\n  if (len < 1) return;                 // 빈 배열이면 타이머 만들지 않음\n  const timer = setInterval(() => {\n    setCurrent(prev => (prev + 1) % len);\n  }, 5000);\n  return () => clearInterval(timer);\n}, [len]);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrent((prev) => (prev + 1) % filteredPosters.length);\n    }, 5000);\n    return () => clearInterval(timer);\n  }, [filteredPosters.length]);\n\n  const visiblePosters = len\n  ? [\n      filteredPosters[current % len],\n      filteredPosters[(current + 1) % len],\n      filteredPosters[(current + 2) % len],\n    ]\n  : [];\n  \n  return (\n    <div className=\"genre-container\">\n      <TopNav />\n      <h2>{category ? `${category} 포스터` : '전체 포스터'}</h2>\n\n      <section className=\"poster-section carousel\">\n        {visiblePosters.map((p) => (\n          <div key={p.id} className=\"poster-card-mine\">\n            <img src={p.image} alt={p.title} className=\"poster-img-mine\" />\n            <div className=\"poster-title\">{p.title}</div>\n            <div className=\"poster-info\">{p.category} {p.location && `| ${p.location}`}</div>\n          </div>\n        ))}\n      </section>\n\n      <div className=\"poster-buttons\">\n        <button onClick={() => navigate('/genre/all')}>See All</button>\n        <button onClick={() => navigate('/genre/recommend')}>Recommendation For U</button>\n      </div> \n    </div>\n  );\n};\n\nexport default Genre;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}