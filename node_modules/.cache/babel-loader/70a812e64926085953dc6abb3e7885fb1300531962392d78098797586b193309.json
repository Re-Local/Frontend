{"ast":null,"code":"var _jsxFileName = \"/Users/iyunji/Desktop/re-local/src/foodmap/foodmap.js\",\n  _s = $RefreshSig$();\nimport './foodmap.css';\nimport React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Foodmap = () => {\n  _s();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = `//dapi.kakao.com/v2/maps/sdk.js?appkey=50d60c48f372a7f105505d4140b8f96d&autoload=false`;\n    script.async = true;\n    let goBackButton; // \"구 다시 선택하기\" 버튼을 전역 변수로 선언\n\n    script.onload = () => {\n      window.kakao.maps.load(() => {\n        const mapContainer = document.getElementById(\"politic-map\");\n        if (!mapContainer) {\n          console.error(\"Map container not found!\");\n          return;\n        }\n        const mapOption = {\n          center: new window.kakao.maps.LatLng(37.566826, 126.9786567),\n          level: 9 // 초기 확대 레벨\n        };\n        const map = new window.kakao.maps.Map(mapContainer, mapOption);\n        const customOverlay = new window.kakao.maps.CustomOverlay({});\n        const infowindow = new window.kakao.maps.InfoWindow({\n          removable: true\n        });\n        let regionPolygons = []; // 구 폴리곤 저장\n        let dongPolygons = []; // 동 폴리곤 저장\n\n        // 동 폴리곤 표시 함수\n        const displayDongAreas = dongData => {\n          dongData.forEach(dong => {\n            const geometryType = dong.geometry.type;\n            if (geometryType === \"Polygon\") {\n              const path = dong.geometry.coordinates[0].map(coord => new window.kakao.maps.LatLng(coord[1], coord[0]));\n              const polygon = new window.kakao.maps.Polygon({\n                map: map,\n                path: path,\n                strokeWeight: 2,\n                strokeColor: \"#5C5B5C\",\n                strokeOpacity: 0.8,\n                fillColor: \"#CACACB\",\n                fillOpacity: 0.7\n              });\n              dongPolygons.push(polygon);\n              addDongPolygonEvents(polygon, dong);\n            } else if (geometryType === \"MultiPolygon\") {\n              dong.geometry.coordinates.forEach(polygonCoords => {\n                const path = polygonCoords[0].map(coord => new window.kakao.maps.LatLng(coord[1], coord[0]));\n                const polygon = new window.kakao.maps.Polygon({\n                  map: map,\n                  path: path,\n                  strokeWeight: 2,\n                  strokeColor: \"#5C5B5C\",\n                  strokeOpacity: 0.8,\n                  fillColor: \"#CACACB\",\n                  fillOpacity: 0.7\n                });\n                dongPolygons.push(polygon);\n                addDongPolygonEvents(polygon, dong);\n              });\n            }\n          });\n        };\n\n        // 동 폴리곤 이벤트 추가 함수\n        const addDongPolygonEvents = (polygon, dong) => {\n          window.kakao.maps.event.addListener(polygon, \"mouseover\", mouseEvent => {\n            polygon.setOptions({\n              fillColor: \"#b29ddb\"\n            });\n            customOverlay.setPosition(mouseEvent.latLng);\n            customOverlay.setMap(map);\n          });\n          window.kakao.maps.event.addListener(polygon, \"mouseout\", () => {\n            polygon.setOptions({\n              fillColor: \"#CACACB\"\n            });\n            customOverlay.setMap(null);\n          });\n          window.kakao.maps.event.addListener(polygon, \"click\", mouseEvent => {\n            const districtName = dong.properties.SIG_KOR_NM;\n            const content = document.createElement(\"div\");\n            content.className = \"infowindow-content\";\n            content.innerHTML = `\n                            <p><b>${dong.properties.DONG_KOR_NM}</b>의 정치인 조회</p>\n                            <div class=\"infowindow-button-container\">\n                                <button id=\"mayor-btn\" class=\"infowindow-button\">구청장 조회</button>\n                                <button id=\"representative-btn\" class=\"infowindow-button\">국회의원 조회</button>\n                            </div>`;\n            infowindow.setContent(content);\n            infowindow.setPosition(mouseEvent.latLng);\n            infowindow.setMap(map);\n            content.querySelector(\"#mayor-btn\").addEventListener(\"click\", () => {\n              if (districtName !== \"종로구\") {\n                alert(\"서비스 준비중입니다.\");\n                return;\n              }\n              navigate(\"/yunji\");\n            });\n            content.querySelector(\"#representative-btn\").addEventListener(\"click\", () => {\n              if (districtName !== \"종로구\") {\n                alert(\"서비스 준비중입니다.\");\n                return;\n              }\n              navigate(\"/seoin\");\n            });\n          });\n        };\n\n        // 구 폴리곤 표시 함수\n        const displayArea = (coordinates, name) => {\n          if (!coordinates || coordinates.length === 0) {\n            console.error(`Invalid coordinates for region: ${name}`);\n            return;\n          }\n          const path = coordinates.map(coord => new window.kakao.maps.LatLng(coord[1], coord[0]));\n          const polygon = new window.kakao.maps.Polygon({\n            map: map,\n            path: path,\n            strokeWeight: 2,\n            strokeColor: \"#004c80\",\n            strokeOpacity: 0.8,\n            fillColor: \"#fff\",\n            fillOpacity: 0.7\n          });\n          regionPolygons.push(polygon);\n          window.kakao.maps.event.addListener(polygon, \"mouseover\", mouseEvent => {\n            polygon.setOptions({\n              fillColor: \"#cfc2e9\"\n            });\n            customOverlay.setPosition(mouseEvent.latLng);\n            customOverlay.setMap(map);\n          });\n          window.kakao.maps.event.addListener(polygon, \"mouseout\", () => {\n            polygon.setOptions({\n              fillColor: \"#fff\"\n            });\n            customOverlay.setMap(null);\n          });\n          window.kakao.maps.event.addListener(polygon, \"click\", () => {\n            regionPolygons.forEach(p => p.setMap(null));\n            regionPolygons = [];\n            const center = centerData.centers.find(item => item.name === name);\n            if (center) {\n              const centerPosition = new window.kakao.maps.LatLng(center.lat, center.lng);\n              map.setCenter(centerPosition);\n            }\n            const dongData = districtsJson.features.filter(dong => dong.properties.SIG_KOR_NM === name);\n            if (dongData.length > 0) {\n              map.setLevel(7);\n              displayDongAreas(dongData);\n              addGoBackButton();\n            } else {\n              alert(`${name}의 동 정보가 없습니다.`);\n            }\n          });\n        };\n\n        // \"구 다시 선택하기\" 버튼 추가\n        const addGoBackButton = () => {\n          if (goBackButton) {\n            return;\n          }\n          goBackButton = document.createElement(\"button\");\n          goBackButton.innerText = \"구 다시 선택하기\";\n          goBackButton.className = \"back-button\";\n          goBackButton.onclick = () => resetToRegions();\n          document.body.appendChild(goBackButton);\n        };\n\n        // 구 다시 선택하기 상태로 리셋\n        const resetToRegions = () => {\n          dongPolygons.forEach(p => p.setMap(null));\n          dongPolygons = [];\n          infowindow.close();\n          map.setCenter(new window.kakao.maps.LatLng(37.566826, 126.9786567));\n          map.setLevel(9);\n          if (goBackButton) {\n            goBackButton.remove();\n            goBackButton = null;\n          }\n          geojson.features.forEach(feature => {\n            const coordinates = feature.geometry.coordinates[0];\n            const name = feature.properties.SIG_KOR_NM;\n            if (!coordinates || coordinates.length === 0) {\n              console.error(`Invalid coordinates for region: ${name}`);\n              return;\n            }\n            displayArea(coordinates, name);\n          });\n        };\n        geojson.features.forEach(feature => {\n          const coordinates = feature.geometry.coordinates[0];\n          const name = feature.properties.SIG_KOR_NM;\n          displayArea(coordinates, name);\n        });\n      });\n    };\n    document.head.appendChild(script);\n\n    // Cleanup function: 다른 페이지로 이동할 때 \"구 다시 선택하기\" 버튼 제거\n    return () => {\n      if (goBackButton) {\n        goBackButton.remove();\n      }\n    };\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"politic-map\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 9\n  }, this);\n};\n_s(Foodmap, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = Foodmap;\nvar _c;\n$RefreshReg$(_c, \"Foodmap\");","map":{"version":3,"names":["React","useEffect","useNavigate","jsxDEV","_jsxDEV","Foodmap","_s","navigate","script","document","createElement","src","async","goBackButton","onload","window","kakao","maps","load","mapContainer","getElementById","console","error","mapOption","center","LatLng","level","map","Map","customOverlay","CustomOverlay","infowindow","InfoWindow","removable","regionPolygons","dongPolygons","displayDongAreas","dongData","forEach","dong","geometryType","geometry","type","path","coordinates","coord","polygon","Polygon","strokeWeight","strokeColor","strokeOpacity","fillColor","fillOpacity","push","addDongPolygonEvents","polygonCoords","event","addListener","mouseEvent","setOptions","setPosition","latLng","setMap","districtName","properties","SIG_KOR_NM","content","className","innerHTML","DONG_KOR_NM","setContent","querySelector","addEventListener","alert","displayArea","name","length","p","centerData","centers","find","item","centerPosition","lat","lng","setCenter","districtsJson","features","filter","setLevel","addGoBackButton","innerText","onclick","resetToRegions","body","appendChild","close","remove","geojson","feature","head","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/iyunji/Desktop/re-local/src/foodmap/foodmap.js"],"sourcesContent":["import './foodmap.css';\nimport React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Foodmap = () => {\n    const navigate = useNavigate();\n    useEffect(() => {\n        const script = document.createElement(\"script\");\n        script.src = `//dapi.kakao.com/v2/maps/sdk.js?appkey=50d60c48f372a7f105505d4140b8f96d&autoload=false`;\n        script.async = true;\n\n        let goBackButton; // \"구 다시 선택하기\" 버튼을 전역 변수로 선언\n\n        script.onload = () => {\n            window.kakao.maps.load(() => {\n                const mapContainer = document.getElementById(\"politic-map\");\n                if (!mapContainer) {\n                    console.error(\"Map container not found!\");\n                    return;\n                }\n                const mapOption = {\n                    center: new window.kakao.maps.LatLng(37.566826, 126.9786567),\n                    level: 9, // 초기 확대 레벨\n                };\n\n                const map = new window.kakao.maps.Map(mapContainer, mapOption);\n                const customOverlay = new window.kakao.maps.CustomOverlay({});\n                const infowindow = new window.kakao.maps.InfoWindow({ removable: true });\n\n                let regionPolygons = []; // 구 폴리곤 저장\n                let dongPolygons = []; // 동 폴리곤 저장\n\n                // 동 폴리곤 표시 함수\n                const displayDongAreas = (dongData) => {\n                    dongData.forEach((dong) => {\n                        const geometryType = dong.geometry.type;\n\n                        if (geometryType === \"Polygon\") {\n                            const path = dong.geometry.coordinates[0].map(\n                                (coord) => new window.kakao.maps.LatLng(coord[1], coord[0])\n                            );\n\n                            const polygon = new window.kakao.maps.Polygon({\n                                map: map,\n                                path: path,\n                                strokeWeight: 2,\n                                strokeColor: \"#5C5B5C\",\n                                strokeOpacity: 0.8,\n                                fillColor: \"#CACACB\",\n                                fillOpacity: 0.7,\n                            });\n\n                            dongPolygons.push(polygon);\n                            addDongPolygonEvents(polygon, dong);\n                        } else if (geometryType === \"MultiPolygon\") {\n                            dong.geometry.coordinates.forEach((polygonCoords) => {\n                                const path = polygonCoords[0].map(\n                                    (coord) => new window.kakao.maps.LatLng(coord[1], coord[0])\n                                );\n\n                                const polygon = new window.kakao.maps.Polygon({\n                                    map: map,\n                                    path: path,\n                                    strokeWeight: 2,\n                                    strokeColor: \"#5C5B5C\",\n                                    strokeOpacity: 0.8,\n                                    fillColor: \"#CACACB\",\n                                    fillOpacity: 0.7,\n                                });\n\n                                dongPolygons.push(polygon);\n                                addDongPolygonEvents(polygon, dong);\n                            });\n                        }\n                    });\n                };\n\n                // 동 폴리곤 이벤트 추가 함수\n                const addDongPolygonEvents = (polygon, dong) => {\n                    window.kakao.maps.event.addListener(polygon, \"mouseover\", (mouseEvent) => {\n                        polygon.setOptions({ fillColor: \"#b29ddb\" });\n                        customOverlay.setPosition(mouseEvent.latLng);\n                        customOverlay.setMap(map);\n                    });\n\n                    window.kakao.maps.event.addListener(polygon, \"mouseout\", () => {\n                        polygon.setOptions({ fillColor: \"#CACACB\" });\n                        customOverlay.setMap(null);\n                    });\n\n                    window.kakao.maps.event.addListener(polygon, \"click\", (mouseEvent) => {\n                        const districtName = dong.properties.SIG_KOR_NM;\n\n                        const content = document.createElement(\"div\");\n                        content.className = \"infowindow-content\";\n                        content.innerHTML = `\n                            <p><b>${dong.properties.DONG_KOR_NM}</b>의 정치인 조회</p>\n                            <div class=\"infowindow-button-container\">\n                                <button id=\"mayor-btn\" class=\"infowindow-button\">구청장 조회</button>\n                                <button id=\"representative-btn\" class=\"infowindow-button\">국회의원 조회</button>\n                            </div>`;\n\n                        infowindow.setContent(content);\n                        infowindow.setPosition(mouseEvent.latLng);\n                        infowindow.setMap(map);\n\n                        content.querySelector(\"#mayor-btn\").addEventListener(\"click\", () => {\n                            if (districtName !== \"종로구\") {\n                                alert(\"서비스 준비중입니다.\");\n                                return;\n                            }\n                            navigate(\"/yunji\");\n                        });\n\n                        content.querySelector(\"#representative-btn\").addEventListener(\"click\", () => {\n                            if (districtName !== \"종로구\") {\n                                alert(\"서비스 준비중입니다.\");\n                                return;\n                            }\n                            navigate(\"/seoin\");\n                        });\n                    });\n                };\n\n                // 구 폴리곤 표시 함수\n                const displayArea = (coordinates, name) => {\n                    if (!coordinates || coordinates.length === 0) {\n                        console.error(`Invalid coordinates for region: ${name}`);\n                        return;\n                    }\n\n                    const path = coordinates.map((coord) => new window.kakao.maps.LatLng(coord[1], coord[0]));\n\n                    const polygon = new window.kakao.maps.Polygon({\n                        map: map,\n                        path: path,\n                        strokeWeight: 2,\n                        strokeColor: \"#004c80\",\n                        strokeOpacity: 0.8,\n                        fillColor: \"#fff\",\n                        fillOpacity: 0.7,\n                    });\n\n                    regionPolygons.push(polygon);\n\n                    window.kakao.maps.event.addListener(polygon, \"mouseover\", (mouseEvent) => {\n                        polygon.setOptions({ fillColor: \"#cfc2e9\" });\n                        customOverlay.setPosition(mouseEvent.latLng);\n                        customOverlay.setMap(map);\n                    });\n\n                    window.kakao.maps.event.addListener(polygon, \"mouseout\", () => {\n                        polygon.setOptions({ fillColor: \"#fff\" });\n                        customOverlay.setMap(null);\n                    });\n\n                    window.kakao.maps.event.addListener(polygon, \"click\", () => {\n                        regionPolygons.forEach((p) => p.setMap(null));\n                        regionPolygons = [];\n\n                        const center = centerData.centers.find((item) => item.name === name);\n                        if (center) {\n                            const centerPosition = new window.kakao.maps.LatLng(center.lat, center.lng);\n                            map.setCenter(centerPosition);\n                        }\n\n                        const dongData = districtsJson.features.filter(\n                            (dong) => dong.properties.SIG_KOR_NM === name\n                        );\n\n                        if (dongData.length > 0) {\n                            map.setLevel(7);\n                            displayDongAreas(dongData);\n                            addGoBackButton();\n                        } else {\n                            alert(`${name}의 동 정보가 없습니다.`);\n                        }\n                    });\n                };\n\n                // \"구 다시 선택하기\" 버튼 추가\n                const addGoBackButton = () => {\n                    if (goBackButton) {\n                        return;\n                    }\n\n                    goBackButton = document.createElement(\"button\");\n                    goBackButton.innerText = \"구 다시 선택하기\";\n                    goBackButton.className = \"back-button\";\n                    goBackButton.onclick = () => resetToRegions();\n                    document.body.appendChild(goBackButton);\n                };\n\n                // 구 다시 선택하기 상태로 리셋\n                const resetToRegions = () => {\n                    dongPolygons.forEach((p) => p.setMap(null));\n                    dongPolygons = [];\n\n                    infowindow.close();\n\n                    map.setCenter(new window.kakao.maps.LatLng(37.566826, 126.9786567));\n                    map.setLevel(9);\n\n                    if (goBackButton) {\n                        goBackButton.remove();\n                        goBackButton = null;\n                    }\n\n                    geojson.features.forEach((feature) => {\n                        const coordinates = feature.geometry.coordinates[0];\n                        const name = feature.properties.SIG_KOR_NM;\n\n                        if (!coordinates || coordinates.length === 0) {\n                            console.error(`Invalid coordinates for region: ${name}`);\n                            return;\n                        }\n\n                        displayArea(coordinates, name);\n                    });\n                };\n\n                geojson.features.forEach((feature) => {\n                    const coordinates = feature.geometry.coordinates[0];\n                    const name = feature.properties.SIG_KOR_NM;\n                    displayArea(coordinates, name);\n                });\n            });\n        };\n\n        document.head.appendChild(script);\n\n        // Cleanup function: 다른 페이지로 이동할 때 \"구 다시 선택하기\" 버튼 제거\n        return () => {\n            if (goBackButton) {\n                goBackButton.remove();\n            }\n        };\n    }, [navigate]);\n\n    return (\n        <div id=\"politic-map\"></div>\n    );\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}